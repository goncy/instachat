var randomcolor = require('just.randomcolor');

var all_sockets = null;

exports.set_sockets = function(sockets) {
    all_sockets = sockets;
};

exports.connect_chatter = function(config) {
    //Random color y sets de socket recien conectado
    var color = new randomcolor({
        r: [0, 120],
        g: [0, 120],
        b: [0, 150],
        a: [0.7, 1]
    });
    config.sala = config.sala ? config.sala : "principal";
    config.socket.color = '#' + color.toHex().value;
    config.socket.username = "Anonimo";
    config.socket.join(config.sala);

    //Creo el identificador de sala y me fijo cuanta gente hay
    var room = config.io.of(config.sala);
    var roomConnected = getRoomConnected(config.io, config.sala);
    //Seteo el nombre de la sala
    room.name = config.sala;
    //Si es el primero lo asigno como creador
    if (roomConnected <= 1 && room.name != "principal") room.owner = config.socket.id;
    //Bienvenido solo al socket

    config.socket.emit('bienvenido', {
        msg: 'Bienvenido a la sala: <span style="font-weight: bold;">' + config.sala + '</span>, hay ' + roomConnected + ' persona/s en la sala.',
        color: config.socket.color,
        owner: room.owner == config.socket.id,
        img: room.img
    });

    //Conexion del socket por broadcast
    config.socket.broadcast.to(config.sala).emit('server message', {
        msg: "Un usuario se conecto!, hay " + roomConnected + " persona/s en la sala.",
        type: "cnx"
    });

    //Listeners de chat y disconnect
    config.socket.on('disconnect', function () {
        config.socket.broadcast.to(config.sala).emit('server message', {
            usr: config.socket.username,
            type: "dcnx",
            color: config.socket
        });
        room.password = getRoomConnected(config.io, config.sala) < 1 ? room.password = "" : room.password;
    });

    //Listener on chat msg
    config.socket.on('chat message', function(data) {
        //Si no hay mensaje vuelve
        if (!data.msg || data.name.length > 15 || data.msg.length > 500) {
            config.socket.emit('alerta', "Hubo un error inesperado, recarga la p치gina, puede ser que el mensaje sea muy largo.");
            return;
        }
        //Emite el mensaje
        data.msg = data.msg.replace(/(<([^>]+)>)/ig, "");
        data.msg = replaceURLWithHTMLLinks(data.msg);
        config.socket.broadcast.to(config.sala).emit('chat message', {
            usr: config.socket.username,
            msg: data.msg,
            color: config.socket.color,
            id: config.socket.id,
            owner: room.owner == config.socket.id
        });
    });

    config.socket.on('prvt message', function(data) {
        //Si no hay mensaje vuelve
        if (!data.msg || data.name.length > 15 || data.msg.length > 500) {
            config.socket.emit('alerta', "Hubo un error inesperado, recarga la p치gina, puede ser que el mensaje sea muy largo.");
            return;
        }
        var receiver = config.io.sockets.connected[data.to];
        if (!receiver) {
            config.socket.emit('alerta', "El usuario ya no se encuentra en la sala");
            return;
        }
        //Emite el mensaje
        config.socket.join(data.to);
        config.io.to(data.to).emit('prvt message', {
            usr_from: config.socket.username,
            usr_to: receiver.username,
            msg: data.msg
        });
        config.socket.leave(data.to);
    });

    //Cuando cambia datos
    config.socket.on('changeData', function(data) {
        config.socket.username = data.name ? data.name : config.socket.username;
    });

    //Quiere cambiar la pass
    config.socket.on('changeRoom', function(data) {
        //Creo unas variables con las que voy a trabajar
        var owner = room.owner == config.socket.id;
        var devolucion = {};
        if (owner) {
            if (data.img) {
                devolucion.img = data.img;
                room.img = data.img;
                devolucion.msg = "Se estableci칩 el link enviado a la sala!"
            }
            if (data.pass) {
                if (room.name == "principal") {
                    devolucion.msg = 'No podes ponerle contrase침a a la sala principal!';
                    return;
                } else {
                    room.password = data.pass;
                    devolucion.msg = 'Pass creada para: ' + room.name;
                }
            }
        } else devolucion.msg = 'No sos el creador de esta sala: ' + room.name;

        if (owner) config.socket.broadcast.to(config.sala).emit('changeRoom', devolucion.img);
        config.socket.emit('alerta', devolucion.msg);
    });
};

exports.failure = function(socket) {
    socket.emit('error', {
        msg: 'Please log in to the chatroom.'
    });
};

function getRoomConnected(io, roomId, namespace) {
    var res = [],
        ns = io.of(namespace || "/");

    if (ns) {
        for (var id in ns.connected) {
            if (roomId) {
                var index = ns.connected[id].rooms.indexOf(roomId);
                if (index !== -1) {
                    res.push(ns.connected[id]);
                }
            } else {
                res.push(ns.connected[id]);
            }
        }
    }
    return parseInt(res.length + 1);
}

function replaceURLWithHTMLLinks(text) {
    var exp = /(\b(((https?|ftp|file|):\/\/)|www[.])[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    text = text.replace(/.*?:\/\//g, "");
    text = text.replace(exp, "<a target='_blank' href='http://$1'>$1</a>");
    return text;
}

/*
function ytVidId(url) {
    var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
    var devolucion = (url.match(p)) ? '<iframe width="98.5%" height="200" src="http://www.youtube.com/embed/' + RegExp.$1 + '" frameborder="0" allowfullscreen></iframe><br>' + url : url.replace(/(<([^>]+)>)/ig, "")
    return devolucion;
}
*/