var randomcolor = require('just.randomcolor');

var all_sockets = null;

exports.set_sockets = function(sockets) {
  all_sockets = sockets;
};

exports.connect_chatter = function(config) {
  //Random color y sets de socket recien conectado
  var color = new randomcolor({ r: [0,120], g: [0,120], b: [0,150], a: [0.7, 1]});
  config.socket.color = '#'+color.toHex().value;
  config.socket.username = "Anonimo";
  config.socket.join(config.sala);

  //Creo el identificador de sala y me fijo cuanta gente hay
  var room = config.io.of(config.sala);
  var roomConnected = getRoomConnected(config.io,config.sala);

  //Si es el primero lo asigno como creador
  if(roomConnected <= 1) room.owner = config.socket.id;
  //Bienvenido solo al socket
  config.socket.emit('bienvenido', {msg:'Bienvenido a la sala: <span style="font-weight: bold;">'+config.sala+'</span>, hay '+roomConnected+' persona/s en la sala.', color: config.socket.color, owner: room.owner == config.socket.id, img: room.img});
  //Conexion del socket por broadcast
  config.socket.broadcast.to(config.sala).emit('server message', {msg:"Un usuario se conecto!, hay "+roomConnected+" persona/s en la sala.",type:"cnx"});
  //Listeners de chat y disconnect

  config.socket.on('chat message', function(data){
    //Si no hay mensaje vuelve
    if(!data.msg || data.name.length > 15 || data.msg.length > 500){
      config.socket.emit('alerta', "Hubo un error inesperado, recarga la p치gina, puede ser que el mensaje sea muy largo.");
      return;
    }
    //Emite el mensaje
    config.socket.broadcast.to(config.sala).emit('chat message', {usr:config.socket.username, msg:data.msg, color:config.socket.color, id:config.socket.id, owner: room.owner == config.socket.id});
  });

  config.socket.on('prvt message', function(data){
    //Si no hay mensaje vuelve
    if(!data.msg || data.name.length > 15 || data.msg.length > 500){
      config.socket.emit('alerta', "Hubo un error inesperado, recarga la p치gina, puede ser que el mensaje sea muy largo.");
      return;
    }
    var receiver = config.io.sockets.connected[data.to];
    if(!receiver){
      config.socket.emit('alerta', "El usuario ya no se encuentra en la sala");
      return;
    }
    //Emite el mensaje
    config.socket.join(data.to);
    config.io.to(data.to).emit('prvt message', {usr_from:config.socket.username, usr_to:receiver.username, msg:data.msg});
    config.socket.leave(data.to);
  });

  //Cuando cambia datos
  config.socket.on('changeData', function(data){
    config.socket.username = data.name ? data.name : config.socket.username;
  });

  //Quiere cambiar la pass
  config.socket.on('changeRoom', function(data){
    //Creo unas variables con las que voy a trabajar
    var owner = room.owner == config.socket.id;
    var devolucion = {};
    if(owner){
      if(data.img){
        devolucion.img = data.img;
        room.img = data.img;
        devolucion.msg = "Se estableci칩 el link enviado a la sala!"
      } 
      if(data.pass){
        if(room.name == "/principal"){
          devolucion.msg = 'No podes ponerle contrase침a a la sala principal!';
          return;
        }else{
          room.password = data.pass;
          devolucion.msg = 'Pass creada para: '+room.name;
        }
      }
    }else devolucion.msg = 'No sos el creador de esta sala: '+room.name;
    
    config.socket.emit('alerta', devolucion.msg);
    config.socket.broadcast.to(config.sala).emit('changeRoom', devolucion.img);
  });
};

exports.failure = function  (socket) {
  socket.emit('error', {msg: 'Please log in to the chatroom.'});
};

function getRoomConnected(io,roomId,namespace) {
  var res = [],
    ns = io.of(namespace ||"/");

  if (ns) {
    for (var id in ns.connected) {
      if(roomId) {
        var index = ns.connected[id].rooms.indexOf(roomId) ;
        if(index !== -1) {
          res.push(ns.connected[id]);
        }
      }
      else {
        res.push(ns.connected[id]);
      }
    }
  }
  return parseInt(res.length+1);
}