var randomcolor = require('just.randomcolor');
var all_sockets = null;

var salas = {
    principal: 0,
};

exports.set_sockets = function(sockets) {
    all_sockets = sockets;
};

exports.connect_chatter = function(config) {
    //Random color y sets de socket recien conectado
    var color = new randomcolor({
            r: [0, 120],
            g: [0, 120],
            b: [0, 150],
            a: [0.7, 1]
        }),
        sala = config.sala || "principal",
        io = config.io,
        socket = config.socket;

    socket.color = '#' + color.toHex().value;
    socket.username = "Anonimo";
    socket.join(sala);

    //Creo el identificador de sala y me fijo cuanta gente hay
    var room = io.of(sala);

    //Si es el primero lo asigno como creador
    if (!salas[sala] && sala != "principal") {
        salas[sala] = 1;
        room.owner = socket.id;
    } else {
        salas[sala] = salas[sala] + 1 || 1;
    }
    //Bienvenido solo al socket

    socket.emit('bienvenido', {
        msg: 'Bienvenido a la sala: <span style="font-weight: bold;">' + sala + '</span>, hay ' + salas[sala] + ' persona/s en la sala.',
        color: socket.color,
        owner: room.owner == socket.id,
        img: room.img || null
    });

    //Conexion del socket por broadcast
    socket.broadcast.to(sala).emit('server message', {
        msg: "Un usuario se conecto!, hay " + salas[sala] + " persona/s en la sala.",
        type: "cnx"
    });

    socket.on('image message', function (image) {
        io.to(sala).emit('image message', {img:image,username:socket.username});
    });

    //Listener on chat msg
    socket.on('chat message', function(data) {
        //Si no hay mensaje vuelve
        if (!data.msg || data.msg.length > 500) {
            socket.emit('alerta', "Hubo un error inesperado, recarga la p치gina, puede ser que el mensaje sea muy largo.");
            return;
        }
        //Emite el mensaje
        data.msg = data.msg.replace(/(<([^>]+)>)/ig, "");
        data.msg = replaceURLWithHTMLLinks(data.msg);
        socket.broadcast.to(sala).emit('chat message', {
            usr: socket.username,
            msg: data.msg,
            color: socket.color,
            id: socket.id,
            owner: room.owner == socket.id
        });
    });

    socket.on('prvt message', function(data) {
        var receiver = io.sockets.connected[data.to];
        var ownMsg = data.to == socket.id;
        //Si no hay mensaje vuelve
        if (!data.msg || data.msg.length > 500) {
            socket.emit('alerta', "Hubo un error inesperado, recarga la p치gina, puede ser que el mensaje sea muy largo.");
            return;
        }
        if (ownMsg) {
            socket.emit('alerta', "No podes mandarte mensajes a vos mismo!");
            return;
        };
        if (!receiver) {
            socket.emit('alerta', "El usuario ya no se encuentra en la sala");
            return;
        }
        //Emite el mensaje
        socket.emit('prvt message', {
            msg: data.msg,
            usr_from: socket.username,
            usr_to: receiver.username,
            feedback: receiver.id
        });
        io.to(data.to).emit('prvt message', {
            msg: data.msg,
            usr_from: socket.username,
            usr_to: receiver.username,
            feedback: socket.id
        });
    });

    socket.on('kickPrv', function(data) {
        var owner = room.owner == socket.id;
        var kicked = io.sockets.connected[data];
        kicked.emit('alerta', 'Fuiste expulsado de la sala');
        if (owner) kicked.disconnect();
        else socket.emit('alerta', "No sos el due침o");
    });

    //Cuando cambia datos
    socket.on('changeData', function(data) {
        if (data.name.length > 15 || data.name.length < 2) {
            socket.emit('alerta', "Nombre invalido");
        } else {
            socket.username = data.name.replace(/[^0-9a-zA-Z ]+/g, "") || socket.username;
            socket.emit('alerta', "Tu nuevo nombre es " + socket.username);
        }
    });

    //Quiere cambiar la pass
    socket.on('changeRoom', function(data) {
        //Creo unas variables con las que voy a trabajar
        var owner = room.owner == socket.id;
        var devolucion = {};

        if (owner) {
            if (data.img) {
                devolucion.img = data.img;
                room.img = data.img;
                devolucion.msg = 'La sala ' + sala + ' fue editada!';
            }
            if (data.pass) {
                room.password = data.pass;
                devolucion.msg = 'La sala ' + sala + ' fue editada!';
            }
        } else if (sala == "principal") {
            devolucion.msg = 'No podes ponerle contrase침a a la sala principal!';
        } else devolucion.msg = 'No sos el creador de esta sala';

        if (owner) socket.broadcast.to(sala).emit('changeRoom', devolucion.img);
        socket.emit('alerta', devolucion.msg);
    });

    socket.on('disconnect', function() {
        salas[sala] = salas[sala] - 1 || 0;
        socket.broadcast.to(sala).emit('server message', {
            usr: socket.username,
            color: socket.color,
            type: "dcnx"
        });
    });
};

function replaceURLWithHTMLLinks(text) {
    var exp = /(\b(((https?|ftp|file|):\/\/)|www[.])[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    text = text.replace(/.*?:\/\//g, "");
    text = text.replace(exp, "<a target='_blank' href='http://$1'>$1</a>");
    return text;
}